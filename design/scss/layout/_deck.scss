
.deck {
  display: block;
  margin-bottom: ($bufferSpaceM - $strokeWidth);
  border-top: $strokeWidth solid $dmBorder;
  padding-top: $bufferSpaceM;
  @include pie-clearfix;
  @include respond-to($vpMenu) {
    margin-bottom: ($bufferSpaceXL - $strokeWidth);
  }
  @supports (display: grid) {
    width: 100%;
    //grid-auto-rows: 1fr;
    grid-column-gap: 3%;
    grid-row-gap: $bufferSpaceS + 2px; // Optically looks smaller due to box-shadow.
    @include respond-to($vpB) {
      display: grid;
      grid-template-columns: repeat(2, minmax(47%, 1fr)); // Gets icky with column gap. There be beasties here
    }
    @include respond-to($vpMenu) {
      grid-template-columns: 1fr;
    }
    @include respond-to($vpMenu + 120px) {
      grid-template-columns: repeat(2, minmax(47%, 1fr)); // Gets icky with column gap. There be beasties here
    }
    @include respond-to($vpF) {
      grid-column-gap: 2%;
      grid-template-columns: repeat(3, minmax(30%, 1fr)); // Gets icky with column gap. There be beasties here
    }
  }
  &Minor {
    @include respond-to($vpF) {
      grid-column-gap: 3%;
      grid-template-columns: repeat(2, minmax(47%, 1fr)); // Gets icky with column gap. There be beasties here
    }
  }
  // Basic grid layout for browsers that don't support css-grid
  .card {
    display: block;
    margin-bottom: $bufferSpaceS;
    @supports (display: grid) {
      @include respond-to($vpB) {
        width: 100%!important;
        margin-left: 0!important;
        margin-bottom: 0;
      }
    }
    @include respond-to($vpB) {
      width: 49%;
      float: left;
      margin-left: 2%;
      &:nth-child(odd) {
        margin-left: 0;
        clear: left;
      }
    }
    @include respond-to-min-max($vpMenu, $vpMenu + 120px) {
      width: 100%;
      display: block;
      margin-left: 0;
      clear: left;
    }
    @include respond-to($vpF) {
      &Filler {
        @supports (display: grid) {
          grid-column: span 2;
        }
      }
    }
  }
}
