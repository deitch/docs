
.searchbar {
  margin-top: $bufferSpaceS;
  position: relative;
  @include respond-to-max($vpMenu) {
    margin-bottom: $bufferSpaceS;
  }
  &_label {
    // TODO: This should really be on a hook to check for JS first
    display: none;
  }
  &_field {
    position: relative;
    b {
      display: none;
      position: absolute;
      left: -400px;
      top: 0;
      height: 100%;
      width: 400px;
      background-color: $dmHarrington;
      transition: all linear 0.25s;
      @include respond-to($vpMenu) {
        display: block;
      }
    }
  }
  &_input {
    border: none;
    position: relative;
    padding: 12px 55px 12px 26px;
    background-color: $dmHarrington;
    width: 100%;
    display: block;
    font-size: rem($typeMe);
    font-family: $fontVoice;
    caret-color: $dmWheeler;
    color: $dmWheeler;
    transition: all linear 0.25s;
    @include respond-to($vpMenu) {
        padding-left: 0;
    }
    &::placeholder {
      color: $dmWheeler;
    }
    &:hover {
      background-color: $dmPrime;
      transition: all linear 0.5s;
      & + b {
        background-color: $dmPrime;
        transition: all linear 0.5s;
      }
    }
    &:focus {
      outline: none;
      background-color: $dmHarrington;
      color: $dmWheeler;
      &::placeholder {
        color: $dmWheeler;
      }
      & + b {
        background-color: $dmHarrington;
      }
    }
  }
  &_button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 24px;
    cursor: pointer;
    svg {
      fill: $dmWheeler;
    }
    &:focus {
      outline: none;
    }
  }
}

.algolia-autocomplete  {
  &:hover {
    & + b {
      background-color: $dmPrime;
      transition: all linear 0.5s;
    }
  }
  &:focus {
    outline: none;
    background-color: $dmHarrington;
    color: $dmWheeler;
    & + b {
      background-color: $dmHarrington;
    }
  }
}

.search {
  display: block;
  margin-bottom: ($bufferSpaceM - $strokeWidth);
  border-top: $strokeWidth solid $dmPrime;
  padding-top: $bufferSpaceS;
  @include pie-clearfix;
  @include respond-to($vpMenu) {
    margin-bottom: ($bufferSpaceXL - $strokeWidth);
    max-width: $containerWidth;
  }
  &_results {
    list-style-type: none;
  }
  &_alert {
    font-size: rem($typeMe + 4);
    color: $dmHenderson;
    padding-bottom: $bufferSpaceS;
    @include respond-to($vpF) {
      font-size: rem($typeM);
    }
  }
  &_result {
    margin-top: ($bufferSpaceM - $strokeWidth);
    border-top: $strokeWidth solid $dmBorder;
    padding-top: $bufferSpaceM;
    &_meta {
      @extend %kernLoose;
      text-transform: uppercase;
      display: block;
      font-size: rem($typeXS);
      margin-bottom: rem($typeDefault);
      a {
        background-image: none;
      }
    }
    &_heading {
      font-size: rem($typeL);
      margin-bottom: rem($typeDefault);
      @include leading_adjust(6);
      a {
        background-image: none;
        color: $dmAction;
        @include link-active-styles {
          color: $dmActionRespond;
        }
      }
    }
    &_excerpt {
      font-size: rem($typeDefault);
    }
  }
  &_highlight {
    font-weight: $fontBold;
    color: $dmHarrington;
    background-color: shade(dmHopper, Light);
    outline: 1px solid $dmHopper;
    padding-right: 6px;
    padding-left: 6px;
  }
}
